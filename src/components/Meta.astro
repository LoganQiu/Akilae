---
interface Props {
  pubdate?: Date | string;
  moddate?: Date | string;
  categories?: string[];
  tags?: string[];
}

const { pubdate, moddate, categories, tags } = Astro.props;

// 格式化日期函数
const formatDate = (date: Date | string | undefined) => {
  if (!date) return null;
  const d = date instanceof Date ? date : new Date(date);
  return d.toISOString().slice(0, 10);
};

const formattedPubDate = formatDate(pubdate);
const formattedModDate = formatDate(moddate);

// 构建日期显示字符串
let dateDisplay = '';
if (formattedPubDate) {
  dateDisplay = `pub: ${formattedPubDate}`;
}
if (formattedModDate) {
  dateDisplay += formattedPubDate ? ` | mod: ${formattedModDate}` : `mod: ${formattedModDate}`;
}
---

<div class="flex flex-col md:flex-row md:justify-between text-sm text-muted gap-1">
  <span>{dateDisplay}</span>
  <span class="md:text-right">
    {
      categories && categories.length > 0 && (
        <>
          {"{"}
          {categories.map((cat, index) => (
            <>
              <a
                href={`/categories/${cat.toLowerCase().replace(/\s+/g, '-')}`}
                class="text-muted"
              >
                {cat}
              </a>
              {index < categories.length - 1 && ", "}
            </>
          ))}
          {"}"}
        </>
      )
    }
    {
      tags && tags.length > 0 && (
        <>
          {" "}
          [
          {tags.map((tag, index) => (
            <>
              <a
                href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
                class="text-muted"
              >
                {tag}
              </a>
              {index < tags.length - 1 && ", "}
            </>
          ))}
          ]
        </>
      )
    }
  </span>
</div>
